/**
 * configapi
 * Config API lets you easily manage configuration at scale.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveConfigurationApiClient) {
      root.CloudmersiveConfigurationApiClient = {};
    }
    root.CloudmersiveConfigurationApiClient.SettingValue = factory(root.CloudmersiveConfigurationApiClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The SettingValue model module.
   * @module model/SettingValue
   * @version 2.4.3
   */

  /**
   * Constructs a new <code>SettingValue</code>.
   * Value of a setting
   * @alias module:model/SettingValue
   * @class
   */
  var exports = function() {
    var _this = this;









  };

  /**
   * Constructs a <code>SettingValue</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SettingValue} obj Optional instance to populate.
   * @return {module:model/SettingValue} The populated <code>SettingValue</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('ConfigSettingValueID')) {
        obj['ConfigSettingValueID'] = ApiClient.convertToType(data['ConfigSettingValueID'], 'String');
      }
      if (data.hasOwnProperty('ConfigSettingDefinitionID')) {
        obj['ConfigSettingDefinitionID'] = ApiClient.convertToType(data['ConfigSettingDefinitionID'], 'String');
      }
      if (data.hasOwnProperty('ConfigSettingValue')) {
        obj['ConfigSettingValue'] = ApiClient.convertToType(data['ConfigSettingValue'], Object);
      }
      if (data.hasOwnProperty('ConfigSettingLastModified')) {
        obj['ConfigSettingLastModified'] = ApiClient.convertToType(data['ConfigSettingLastModified'], 'Date');
      }
      if (data.hasOwnProperty('ConfigSettingName')) {
        obj['ConfigSettingName'] = ApiClient.convertToType(data['ConfigSettingName'], 'String');
      }
      if (data.hasOwnProperty('ConfigSettingDescription')) {
        obj['ConfigSettingDescription'] = ApiClient.convertToType(data['ConfigSettingDescription'], 'String');
      }
      if (data.hasOwnProperty('ConfigSettingTags')) {
        obj['ConfigSettingTags'] = ApiClient.convertToType(data['ConfigSettingTags'], 'String');
      }
      if (data.hasOwnProperty('ConfigSettingType')) {
        obj['ConfigSettingType'] = ApiClient.convertToType(data['ConfigSettingType'], 'String');
      }
    }
    return obj;
  }

  /**
   * The ID of the setting value
   * @member {String} ConfigSettingValueID
   */
  exports.prototype['ConfigSettingValueID'] = undefined;
  /**
   * The ID of the definition of the setting
   * @member {String} ConfigSettingDefinitionID
   */
  exports.prototype['ConfigSettingDefinitionID'] = undefined;
  /**
   * The value of the setting
   * @member {Object} ConfigSettingValue
   */
  exports.prototype['ConfigSettingValue'] = undefined;
  /**
   * The last modified date of the setting
   * @member {Date} ConfigSettingLastModified
   */
  exports.prototype['ConfigSettingLastModified'] = undefined;
  /**
   * Name of the setting
   * @member {String} ConfigSettingName
   */
  exports.prototype['ConfigSettingName'] = undefined;
  /**
   * Description of the setting
   * @member {String} ConfigSettingDescription
   */
  exports.prototype['ConfigSettingDescription'] = undefined;
  /**
   * Setting tags
   * @member {String} ConfigSettingTags
   */
  exports.prototype['ConfigSettingTags'] = undefined;
  /**
   * Possible values are: STRING, JSON
   * @member {String} ConfigSettingType
   */
  exports.prototype['ConfigSettingType'] = undefined;



  return exports;
}));


