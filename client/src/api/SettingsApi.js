/**
 * configapi
 * Config API lets you easily manage configuration at scale.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateSettingRequest', 'model/CreateSettingResponse', 'model/ListSettingsRequest', 'model/ListSettingsResponse', 'model/UpdateSettingRequest', 'model/UpdateSettingResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateSettingRequest'), require('../model/CreateSettingResponse'), require('../model/ListSettingsRequest'), require('../model/ListSettingsResponse'), require('../model/UpdateSettingRequest'), require('../model/UpdateSettingResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveConfigurationApiClient) {
      root.CloudmersiveConfigurationApiClient = {};
    }
    root.CloudmersiveConfigurationApiClient.SettingsApi = factory(root.CloudmersiveConfigurationApiClient.ApiClient, root.CloudmersiveConfigurationApiClient.CreateSettingRequest, root.CloudmersiveConfigurationApiClient.CreateSettingResponse, root.CloudmersiveConfigurationApiClient.ListSettingsRequest, root.CloudmersiveConfigurationApiClient.ListSettingsResponse, root.CloudmersiveConfigurationApiClient.UpdateSettingRequest, root.CloudmersiveConfigurationApiClient.UpdateSettingResponse);
  }
}(this, function(ApiClient, CreateSettingRequest, CreateSettingResponse, ListSettingsRequest, ListSettingsResponse, UpdateSettingRequest, UpdateSettingResponse) {
  'use strict';

  /**
   * Settings service.
   * @module api/SettingsApi
   * @version 2.4.2
   */

  /**
   * Constructs a new SettingsApi. 
   * @alias module:api/SettingsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the settingsCreateSetting operation.
     * @callback module:api/SettingsApi~settingsCreateSettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSettingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a setting in the specified bucket
     * @param {module:model/CreateSettingRequest} request Request to perform the operation on
     * @param {module:api/SettingsApi~settingsCreateSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSettingResponse}
     */
    this.settingsCreateSetting = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling settingsCreateSetting");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CreateSettingResponse;

      return this.apiClient.callApi(
        '/config/settings/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsListSettings operation.
     * @callback module:api/SettingsApi~settingsListSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enumerate the settings in a bucket
     * @param {module:model/ListSettingsRequest} request Request to perform the operation on
     * @param {module:api/SettingsApi~settingsListSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSettingsResponse}
     */
    this.settingsListSettings = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling settingsListSettings");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ListSettingsResponse;

      return this.apiClient.callApi(
        '/config/settings/list', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsUpdateSetting operation.
     * @callback module:api/SettingsApi~settingsUpdateSettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSettingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a setting
     * @param {module:model/UpdateSettingRequest} request Request to perform the operation on
     * @param {module:api/SettingsApi~settingsUpdateSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSettingResponse}
     */
    this.settingsUpdateSetting = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling settingsUpdateSetting");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UpdateSettingResponse;

      return this.apiClient.callApi(
        '/config/settings/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
